{"version":3,"sources":["components/Output.tsx","components/Button.tsx","components/Setup/SetButton.tsx","components/Setup/SetValue.tsx","components/Setup/SetupCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Output","props","className","isError","isChange","value","maxValue","Button","onClick","callBackHandler","disabled","title","SetButton","error","setButtonHandler","minValue","SetValue","console","log","type","inputNewMaxValue","onChange","e","isNaN","currentTarget","onChangeMaxValue","inputNewMinValue","onChangeMinValue","SetupCounter","useState","setInputNewMinValue","setInputNewMaxValue","changeErrorStatus","setIsChangeTrue","App","defaultState","startValue","currentValue","savedState","localStorage","getItem","JSON","parse","setValue","state","stateAsString","stringify","setItem","saveState","min","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3d65b031.chunk.js","sourcesContent":["import React from \"react\";\n\ntype PropsType = {\n    value: number\n    maxValue: number\n    isChange: boolean\n    isError: boolean\n}\n\nexport function Output(props: PropsType) {\n    return (\n        <div className=\"output\">\n\n            {   props.isError ? <span className={'error-data'}>INCORRECT values</span> :\n                props.isChange ?\n                <span>enter values and press \"SET\"</span> :\n                <span className={props.value === props.maxValue ? 'count-red' : 'count'}>{props.value}</span>}\n        </div>\n    )\n}","import React from \"react\";\n\ntype PropsType = {\n    title: string\n    callBackHandler: () => void\n    value?: number\n    maxValue?: number\n    disabled: boolean\n}\n\nexport function Button(props: PropsType) {\n    return (\n            <button\n                className=\"btn\"\n                onClick={() => props.callBackHandler()}\n                disabled={props.disabled}\n            >{props.title}\n            </button>\n    )\n}","import React from \"react\";\nimport {Button} from \"../Button\";\n\ntype PropsType = {\n    minValue: number\n    maxValue: number\n    setButtonHandler: (min: number, max: number) => void\n    error: boolean\n}\n\nexport function SetButton(props: PropsType) {\n\n    const ButtonHandler = () => {\n        props.setButtonHandler(props.minValue, props.maxValue);\n    }\n\n\n    return (\n        <div className={'manage'}>\n            <Button title={'SET'} disabled={props.error} callBackHandler={ButtonHandler}/>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from \"react\";\n\ntype PropsType = {\n    inputNewMinValue: number\n    inputNewMaxValue: number\n    onChangeMaxValue: (value:number) => void\n    onChangeMinValue: (value: number) => void\n    changeErrorStatus: (isError: boolean) => void\n    error: boolean\n}\n\n\nexport function SetValue(props: PropsType) {\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>): void => {\n        if (isNaN(+e.currentTarget.value)) return\n        props.onChangeMaxValue(+e.currentTarget.value);\n    }\n\n    const onChangeMinValue = (e: ChangeEvent<HTMLInputElement>): void => {\n        if (isNaN(+e.currentTarget.value)) return\n        props.onChangeMinValue(+e.currentTarget.value);\n    }\n\n    console.log(props.error)\n\n    return (\n        <div className={\"setup\"}>\n            <div>\n                <span className={'label-input'}>Max Value</span>\n                <input className={props.error ? 'input-error': ''}\n                    type=\"number\"\n                    value={props.inputNewMaxValue}\n                    onChange={onChangeMaxValue}\n                /></div>\n            <div>\n                <span className={'label-input'}>Min Value</span>\n                <input className={props.error ? 'input-error': ''}\n                    type=\"number\"\n                    value={props.inputNewMinValue}\n                onChange={onChangeMinValue}\n                />\n            </div>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {SetButton} from \"./SetButton\";\nimport {SetValue} from \"./SetValue\";\n\n\ntype PropsType = {\n    setButtonHandler: (min: number, max: number) => void\n    setIsChangeTrue: () => void\n    changeErrorStatus: (isError: boolean) => void\n    error: boolean\n}\n\nexport function SetupCounter(props: PropsType) {\n\n    let [inputNewMinValue, setInputNewMinValue] = useState<number>(0)\n    let [inputNewMaxValue, setInputNewMaxValue] = useState<number>(0)\n\n    if (inputNewMinValue > inputNewMaxValue && props.error === false) props.changeErrorStatus(true)\n    if(inputNewMinValue < inputNewMaxValue && props.error === true) props.changeErrorStatus(false)\n\n    const onChangeMinValue = (value: number): void => {\n        props.setIsChangeTrue();\n        setInputNewMinValue(value);\n    }\n\n    const onChangeMaxValue = (value: number): void => {\n        props.setIsChangeTrue();\n        setInputNewMaxValue(value);\n    }\n    //\n    return (\n        <div>\n            <SetValue\n                inputNewMinValue={inputNewMinValue}\n                inputNewMaxValue={inputNewMaxValue}\n                onChangeMaxValue={onChangeMaxValue}\n                onChangeMinValue={onChangeMinValue}\n                changeErrorStatus={props.changeErrorStatus}\n                error={props.error}\n            />\n            <SetButton maxValue={inputNewMaxValue} minValue={inputNewMinValue} setButtonHandler={props.setButtonHandler} error={props.error}/>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Output} from \"./components/Output\";\nimport {Button} from \"./components/Button\";\nimport {SetupCounter} from \"./components/Setup/SetupCounter\";\n\nfunction App() {\n    function saveState<T>(state: T) {\n        const stateAsString = JSON.stringify(state);\n        localStorage.setItem('state', stateAsString)\n    }\n\n    let defaultState = {\n        startValue: 0,\n        maxValue: 0,\n        currentValue: 0,\n        isChange: false,\n        isError: false\n    }\n\n\n    let [value, setValue] = useState(()=> {\n        const savedState = localStorage.getItem('state')\n        return savedState !== null ? JSON.parse(savedState) : defaultState\n    })\n\n    saveState(value)\n\n    const incButton = () => {\n        setValue({...value, currentValue: value.currentValue + 1})\n    }\n\n    const resetButton = () => {\n        setValue({...value, currentValue: value.startValue})\n    }\n\n    const setButtonHandler = (min: number, max: number) => {\n        setValue({...value, startValue: min, maxValue: max, currentValue: min, isChange: false})\n    }\n\n    const setIsChangeTrue = () => {\n        setValue({...value, isChange: true})\n    }\n\n    const changeErrorStatus = (isError: boolean) => {\n        setValue({...value, isError: isError})\n    }\n\n    return (\n\n        <div className=\"wrapper\">\n            <div className=\"containerSetup\">\n                <SetupCounter setButtonHandler={setButtonHandler} setIsChangeTrue={setIsChangeTrue}\n                              changeErrorStatus={changeErrorStatus} error={value.isError}/>\n            </div>\n\n            <div className=\"containerManager\">\n                <Output value={value.currentValue} maxValue={value.maxValue} isChange={value.isChange}\n                        isError={value.isError}/>\n                <div className={'manage'}>\n                    <Button\n                        callBackHandler={incButton}\n                        value={value.currentValue}\n                        maxValue={value.maxValue}\n                        title={'INC'}\n                        disabled={!(value.currentValue !== value.maxValue)}\n                    />\n                    <Button\n                        callBackHandler={resetButton}\n                        value={value.currentValue}\n                        maxValue={value.maxValue}\n                        title={'RESET'}\n                        disabled={!(value.currentValue !== value.startValue)}\n                    />\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}